--- Arrancar y parar docker
dockerd
systemctl start dockerd
systemctl enable docker
systemctl status dockerd
systemctl stop dokcerd

--- arrancar un contenedor
docker --version
docker info
docker run hello-world 

-- ver imagenes y contenedores
docker --help
docker images --help
docker images --> muestra imagenes en local
docker images -q
docker ps --> muestra los contenedores arrancados
docker ps -a --> ver todos los contenedores
docker ps -l -n 4-->nos muestra los ultimos contenedores sobre los cuales se han realizado acciones
dockre ps -a ps -q --> muestra id de los contenedores

--- crear un contendedor interactivo
docker run -it ubuntu 
docker start -i {{id_contenedor}} --> entrar modo interactivo

--- crear un contendedor en background
docker run -d nginx 

--- borrar imagenes y contenedores
docker rm {{CONTAINER_ID}} --> borra contenedores
docker rm {{NAMES}}
docker rmi {{CONTAINER_ID}}  --> borra imagenes
docker rmi {{NAMES}}

--- eliminar todos los contenedores
docker rm `docker ps -aq`

--- docker exec
docker run -it --name mi_ubuntu ubuntu bash
docker exec mi_ubuntu echo hola

--- descargar solo la imagen
docker pull python

--- docker logs y docker kill
docker logs {{CONTAINER_ID}}
docker kill {{CONTAINER_ID}}

--- docker top y docker stats
docker top {{CONTAINER_ID}}
docker stats {{CONTAINER_ID}}

--- docker inspect
docker inspect {{CONTAINER_ID}}
docker inspect {{CONTAINER_ID}} > container1.txt

--- Gestionar puertos para acceder al contenedor
docker run -d -P nginx
docker run -d --name nginx2 -p 8080:80 nginx

--- Redes en docker 
docker network ls
docker inspect {{NAMES}} | grep IPAddress
docker network inspect bridge

--- crear una nueva red
docker network create red1
docker network create --subnet=192.168.0.0/16 red2 

--- asociar contenedores en una red
docker run -it --name ubuntu1 --network red1 ubuntu
docker run -d --name nginx3 --network red1 nginx

docker network connect red2 ubuntu1 --> añade el contenedor ubuntu1 a la red2 y mantiene la que ya tenía
docker network disconnect red2 ubuntu1 --> quita el contenedor ubuntu1 de la red2

--- enlazar contenedores con --link
docker  run -it --rm --name b1 busybox
docker  run -it --rm --name b2 busybox

docker  run -it --rm --name b3 --link b1:maquina1 busybox -->con este comando enlazamos contenedores

--- enlazar contenedores con redes personalizadas
docker run -d --name mysql_server --rm network red1 -e MYSQL_ROOT_PASSWORD=secret mysql
docker run -d --name mysql_client --rm network red1 mysql bash

--- enlazar contenedores wordpress y mysql
docker run -d --name mysql_wp --rm network red1 -e MYSQL_ROOT_PASSWORD=secret mysql
docker run -d --name wp --rm network red1 -e WORDPRESS_DB_HOST=mysql_wp WORDPRESS_DB_PASSWORD=secret -p 8080:80 wordpress

--- borrar red
docker network rm red1


--- Crear un volumen en un contenedor
cd /var/lib/docker
cd volumes
docker run -it -v /datos --name ubuntu1 ubuntu bash

--- ver volumenes
docker volume ls
docker volume inspect {{VOLUME_NAME}}

--- Crear un directorio compartido con el host
mkdir /root/dir1
docker run -it -v /root/dir1:/datos --name ubuntu1 ubuntu
docker volume ls --> no aparece el volumen pq lo trata como un bind
docker inspect ubuntu1

--- Compartir volumenes entre contenedores
cd /var/lib/docker/volumes
docker run -it -v /datos --name ubuntu1 ubuntu bash
docker run -it --name ubuntu5 --volumes-from-ubuntu1 ubuntu bash






 

