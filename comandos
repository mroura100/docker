--- Arrancar y parar docker
dockerd
systemctl start dockerd
systemctl enable docker
systemctl status dockerd
systemctl stop dokcerd

--- arrancar un contenedor
docker --version
docker info
docker run hello-world 

-- ver imagenes y contenedores
docker --help
docker images --help
docker images --> muestra imagenes en local
docker images -q
docker ps --> muestra los contenedores arrancados
docker ps -a --> ver todos los contenedores
docker ps -l -n 4-->nos muestra los ultimos contenedores sobre los cuales se han realizado acciones
dockre ps -a ps -q --> muestra id de los contenedores

--- crear un contendedor interactivo
docker run -it ubuntu 
docker start -i {{id_contenedor}} --> entrar modo interactivo

--- crear un contendedor en background
docker run -d nginx 

--- borrar imagenes y contenedores
docker rm {{CONTAINER_ID}} --> borra contenedores
docker rm {{NAMES}}
docker rmi {{CONTAINER_ID}}  --> borra imagenes
docker rmi {{NAMES}}

--- eliminar todos los contenedores
docker rm `docker ps -aq`

--- docker exec
docker run -it --name mi_ubuntu ubuntu bash
docker exec mi_ubuntu echo hola

--- descargar solo la imagen
docker pull python

--- docker logs y docker kill
docker logs {{CONTAINER_ID}}
docker kill {{CONTAINER_ID}}

--- docker top y docker stats
docker top {{CONTAINER_ID}}
docker stats {{CONTAINER_ID}}

--- docker inspect
docker inspect {{CONTAINER_ID}}
docker inspect {{CONTAINER_ID}} > container1.txt

--- Gestionar puertos para acceder al contenedor
docker run -d -P nginx
docker run -d --name nginx2 -p 8080:80 nginx

--- Redes en docker 
docker network ls
docker inspect {{NAMES}} | grep IPAddress
docker network inspect bridge

--- crear una nueva red
docker network create red1
docker network create --subnet=192.168.0.0/16 red2 

--- asociar contenedores en una red
docker run -it --name ubuntu1 --network red1 ubuntu
docker run -d --name nginx3 --network red1 nginx

docker network connect red2 ubuntu1 --> añade el contenedor ubuntu1 a la red2 y mantiene la que ya tenía
docker network disconnect red2 ubuntu1 --> quita el contenedor ubuntu1 de la red2

--- enlazar contenedores con --link
docker  run -it --rm --name b1 busybox
docker  run -it --rm --name b2 busybox

docker  run -it --rm --name b3 --link b1:maquina1 busybox -->con este comando enlazamos contenedores

--- enlazar contenedores con redes personalizadas
docker run -d --name mysql_server --rm network red1 -e MYSQL_ROOT_PASSWORD=secret mysql
docker run -d --name mysql_client --rm network red1 mysql bash

--- enlazar contenedores wordpress y mysql
docker run -d --name mysql_wp --rm network red1 -e MYSQL_ROOT_PASSWORD=secret mysql
docker run -d --name wp --rm network red1 -e WORDPRESS_DB_HOST=mysql_wp WORDPRESS_DB_PASSWORD=secret -p 8080:80 wordpress

--- borrar red
docker network rm red1


--- Crear un volumen en un contenedor
cd /var/lib/docker
cd volumes
docker run -it -v /datos --name ubuntu1 ubuntu bash

--- ver volumenes
docker volume ls
docker volume inspect {{VOLUME_NAME}}

--- Crear un directorio compartido con el host
mkdir /root/dir1
docker run -it -v /root/dir1:/datos --name ubuntu1 ubuntu
docker volume ls --> no aparece el volumen pq lo trata como un bind
docker inspect ubuntu1

--- Compartir volumenes entre contenedores
cd /var/lib/docker/volumes
docker run -it -v /datos --name ubuntu1 ubuntu bash
docker run -it --name ubuntu5 --volumes-from-ubuntu1 ubuntu bash

--- Crear un volumen independiente
docker volume create vol1
docker run -it -v /vol1:/datos --name ubuntu1 ubuntu
docker run -it -v /vol1:/datos:ro --name ubuntu1 ubuntu --> read only

--- borrar un volumen
docker volume rm {{volume_name}}
docker volume prune

--- modificar un contenedor
docker run -it --name ubuntu1 ubuntu bash
docker diff ubuntu1 --> muestra diferencias con la imagen original

--- docker commit.Crear una imagen manualmente
docker commit ubuntu1 mi_imagen_ubuntu
docker images --> vemos la imagen nueva creada
docker run -it --name ubuntu_custom mi_imagen_ubuntu bash


--- dockerfile
--- crear una imagen desde un dockerfile
mkdir imagen_python
cd imagen_python
vi Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get install -y python
RUN echo 1.0 >> /etc/version && apt-get install -y git \
    && apt-get install -y iputils-ping
##WORKDIR
RUN mkdir /datos
WORKDIR /datos
RUN touch f1.txt
RUN mkdir /datos2
WORKDIR /datos2
RUN touch f2.txt
##COPY
COPY index.html .
COPY app.log /datos
##ADD
ADD docs docs
ADD f* /datos/
ADD f.tar .
##ENV
ENV dir=/data dir1=/data1
RUN mkdir $dir && mkdir $dir1
CMD ["/bin/bash"]
##ARG -- cuando creamos la imagen tenemos que indicar el valor del ARG ejemplo:"docker build -t image:v3 --build-arg dir2=/data2 ."
ARG dir2
RUN mkdir $dir2
ARG user
ENV user_docker=$user
ADD add_user.sh /datos1
RUN /datos1/add_user.sh
##EXPOSE
RUN apt-get install -y apache2
EXPOSE 80
ADD entrypoint.sh /datos1 --> el script entrypoint.sh inicia el servicio apache2
##VOLUME
ADD paginas /var/www/html
VOLUME ["/var/www/html"]
CMD ["/datos1/entrypoint.sh"]
##CMD ["/bin/bash"]
##ENTRYPOINT ["/bin/bash"]

--- construir una imagen
docker build -t imagen_python:latest .

--- ver historial de una imagen
docker image history imagen_python

--- subir imagenes a docker hub
docker login
docker image tag ubuntu3:v7 mroura10/ubuntu3:v7
docker push mroura10/ubuntu3:v7
docker pull mroura10/ubuntu3:v7

--- Integración continua.Conectar dockerhub y github de forma automática
creamos repositorio en github imagen_python
cd imagen_python
git init
git add *
git commit -m "first commit"
git status
git remote add origin {{nuestra ur}}
git push -u origin master

##vamos adockerhub
create-->create automated build-->link to github-->public and privated(recommended)

--- Docker compose
--- Instalar docker-compose
github docker compose

--- Fichero docker-compose.yml
# Vamos a definir los servicios y contenedores a usar
version: '3'
services:
    # Preparamos el cliente
    angular:
      image: angular-cli:v1 # 
      ports:
      - "4200:4200" # Puerto del cliente
    # Preparamos el servidor
    servidor:
      image: server:v1
      ports:
      - "3000:3000" #Puerto del servidor
    #Contenedor de Mongo
    database:
      image: mongo
      ports:
      - "27017:27017"
        
     
--- mi primer compose
cat docker-compose.yml
version: '3'
services:
    # Preparamos el cliente
    nginx:
    image: nginx  
    ports:
    - "80:80" # Puerto del cliente


-- enlazar servicios. Puertos y varables
version: '3'
services:
  wordpress:
     image: wordpress
     environment:
      WORDPRESS_DB_HOST: dbserver:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: mysqlpw
      WORDPRESS_DB_NAME: wordpress
     ports:
      - 80:80
     depends_on:
      - dbserver
  dbserver:
     image: mysql:5.7
     environment:
      MYSQL_ROOT_PASSWORD: mysqlpw
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: mysqlpw
     ports:
      - 3306:3306
      
    
-- ejecutar un docker compose
docker-compose up

-- diversos comando de docker-compose
docker-compose ps
docker-compose images
docker-compose stop
docker compose config
docker-compose start
docker-compose restart
docker-compose pause
docker-compose unpause
docker-compose rm
docker-compose logs {{container_name}}
docker-compose config --services
docker-compose exec {{container_name}} sh
docker-compose down ##LO BORRA TODO


-- volumenes en docker-compose
version: "3.2"
services:
  web:
    image: nginx:alpine
    volumes:
      - type: volume
        source: mydata
        target: /data
        volume:
          nocopy: true
      - type: bind
        source: ./static
        target: /opt/app/static
    ports:
      - 80:80
  db:
    image: postgres:latest
    volumes:
      - "/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock"
      - "dbdata:/var/lib/postgresql/data"

volumes:
  mydata:
  dbdata:
  
  
-- Redes en docker-compose
version: '3.3'

services:
  app:
    image: client
    container_name: client
    build: .
    ports: 
      - 80:3000
    environment:
      - MONGO_URI=mongodb://mongo_db/sample
    depends_on: 
      - db
    networks: 
      - net3
  db:
    image: mongo:3.0.15
    container_name: mongo_db
    volumes:
      - ./db:/data/db
    networks:
      net3:
        aliases:
          - "mongo_db"
        ipv4_address: 172.16.238.10
        ipv6_address: 2001:3984:3989::10
networks:
  net3:
    driver: bridge
    ipam:
      driver: default
      config:
      -
        subnet: 172.16.238.0/24
      -
        subnet: 2001:3984:3989::/64
        
-- Docker swarm
docker swarm
docker service

-- iniciar nuevo cluster (manager)
docker swarm init --advertise-addr {{ip_host}}


-- añadir un worker
docker swarm join --token {{id_token}}
##comando para sacar el id del token 
docker swarm join-token worker

-- comandos docker swarm
-- trabajar con un cluster de docker
docker node
docker node ls
docker node inspect --pretty nodo2

-- convertir un worker en un manager
docker node promote nodo3 --> lo deja en estado recheable
docker node demote nodo1 --> quitamos el nodo1 del worker, el lider ahora es el nodo3






  
 






 

